from typing import  List, Union
from fastapi import FastAPI, Header, Form,  Response, status, HTTPException
from pydantic import BaseModel, Field
import json
import math
import secrets
import base64

app=FastAPI()
keys=[]

class Nt_Host(BaseModel):
   nt_host :str = Field(None, title="name of host", max_length=15)

with open("./templates/data.json","r") as f:
    data=json.load(f)

with open("./templates/device_data.json","r") as f:
    devices=json.load(f)

def is_auth(api_key):
    if api_key in keys:
        return 1
    else:
        return 0

def save_devices():
    with open("./templates/device_data.json","w") as f:
        f.write(json.dumps(devices))

@app.get('/')
def hello():
    return {"Hello","World"}

@app.get(
    "/image",

    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses = {
        200: {
            "content": {"image/png": {}}
        }
    },

    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response
)
def get_image():
    with open("applogo.png", "rb") as image:
        #f = image.read()
        image_bytes: bytes = image.read()
        #encoded_image_string = base64.b64encode(image.read())
    # media_type here sets the media type of the actual response sent to the client.
        return Response(content=image_bytes, media_type="image/png")

@app.get('/auth', status_code=200)
#async def login(username: str = Form(), password: str = Form()):
#    return {"username": username} 
async def read_items(response: Response, Authorization: Union[str, None] = Header(default=None)):
    print(Authorization)
    if Authorization=="Basic bmFtZTpwYXNzd29yZA==":
        key = secrets.token_hex(30)
        keys.append(key)
        return key
    else:
        response.status_code = 401
        return "Authenication Failure"
    #return {"Authorization": Authorization}    

@app.get('/getuser/username/{username}', status_code=200)
async def read_item(username, response: Response, api_key: Union[str, None] = Header(default=None)):
    if is_auth(api_key):
        if str(username):
            for d in data:            
                if d["username"]==username:
                    #print(d)
                    return d
            return {}
        elif isinstance(username, int):
            for d in data:            
                if d["id"]==username:
                    #print(d)
                    return d
            return {}
    else:
        response.status_code = 401
        return "Authenication Failure"           

@app.get('/getuser/userid/{userid}', status_code=200)
async def read_item(userid: int, response: Response, api_key: Union[str, None] = Header(default=None)):
    if is_auth(api_key):
        pass
    else:
        response.status_code = 401
        return "Authenication Failure"        
    if isinstance(userid, int) and is_auth(api_key):
        for d in data:            
            if d["id"]==userid:
                #print(d)
                return d
        return {}       
      
@app.get('/getusers', status_code=200)
async def read_item(page: int = 0, api_key: Union[str, None] = Header(default=None), response: Response=200):
    print(api_key)
    if is_auth(api_key):
        if isinstance(page, int):
            result_start=page * 10
            total_page=len(data)
            num_pages=math.floor(total_page/10)
            if result_start > total_page:
                return {}        
            results={'data':data[result_start:result_start+10],"number_of_results":total_page,'page_num':page,'num_pages':num_pages}
            return results
    else:
        response.status_code = 401
        return "Authenication Failure"

@app.get('/getdevices', status_code=200)
async def read_item(page: int = 0, status: str = None, api_key: Union[str, None] = Header(default=None), response: Response=200):
    print(api_key)
    if is_auth(api_key):
        if status:
            return list(filter(lambda x:x["status"]==status,devices))
        if isinstance(page, int):
            result_start=page * 10
            total_page=len(devices)
            num_pages=math.floor(total_page/10)
            if result_start > total_page:
                return {}        
            results={'data':devices[result_start:result_start+10],"number_of_results":total_page,'page_num':page,'num_pages':num_pages}
            return results
    else:
        response.status_code = 401
        return "Authenication Failure"   

@app.get('/getdevice/hostname/{hostname}', status_code=200)
async def read_item(hostname,page: int = 0, status: str = None, api_key: Union[str, None] = Header(default=None), response: Response=200):
    print(api_key)
    if is_auth(api_key):
        if hostname:
            return list(filter(lambda x:x["nt_host"]==hostname,devices))
        else:
            response.status_code = 400
            return "hostname is missing"              
    else:
        response.status_code = 401
        return "Authenication Failure"   

@app.get('/getdevice/ip/{ip}', status_code=200)
async def read_item(ip,page: int = 0, status: str = None, api_key: Union[str, None] = Header(default=None), response: Response=200):
    print(api_key)
    if is_auth(api_key):
        if ip:
            return list(filter(lambda x:x["IPv4"]==ip,devices))
        else:
            response.status_code = 400
            return "IP is missing"              
    else:
        response.status_code = 401
        return "Authenication Failure"   

@app.get('/getdevice/mac/{mac}', status_code=200)
async def read_item(mac,page: int = 0, status: str = None, api_key: Union[str, None] = Header(default=None), response: Response=200):
    print(api_key)
    if is_auth(api_key):
        if mac:
            return list(filter(lambda x:x["mac_address"]==mac,devices))
        else:
            response.status_code = 400
            return "MAC is missing"              
    else:
        response.status_code = 401
        return "Authenication Failure"   

@app.post('/containdevice', status_code=200)
async def read_item(nt_host: str = None, api_key: Union[str, None] = Header(default=None), response: Response=200):
    print(api_key)
    print(nt_host)
    if nt_host:
        pass
    else:
        return {"data":"Must pass a hostname in order to contain a host - this should be a query string /containdevice?nt_host=hostname"}
    if is_auth(api_key):
        if status:
            for d in devices:
                if d["nt_host"]==nt_host:
                    if d["status"]=="contained":
                        return {"data":"host already contained"}
                    else:
                        d["status"]="contained"
                        save_devices()
                        return {"data":d}
            return {"data":"Host not found"}
    else:
        response.status_code = 401
        return "Authenication Failure"   

@app.get('/gettokens')
async def read_item():
    results={'data':keys}
    return results        

@app.get('/test')
async def read_item(api_key: Union[str, None] = Header(default=None), page: int = 0):
    if api_key in keys:
        return "Success"
    else:
        return "failure"